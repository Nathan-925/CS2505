1.
limit
dec = 1752457582
hex = 0x6874616e

addend
dec = 110
hex = 0x6e

2.
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x000000000040116b in main at q1.c:15
        breakpoint already hit 1 time
2       breakpoint     keep y   0x0000000000401174 in main at q1.c:16
        stop only if check>30000000

3.
(gdb) print check
$7 = 141844956

4.
(gdb) info breakpoints
Num     Type           Disp Enb Address            What
2       breakpoint     keep y   0x0000000000401174 in main at q1.c:16
        stop only if check>30000000
        breakpoint already hit 1 time

5.
check = 141844956
iter = 2

6.
[nathan925@birch q2]$ q2 3 19
prod(3, 19) == 1235

7.
(gdb) b 41
Breakpoint 1 at 0x401230: file q2.c, line 41.
(gdb) run 3 19
Starting program: /home/ugrads/nonmajors/nathan925/C03/C03gdb-summer12023/q2/q2 3 19
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".
prod(3, 19) == 1235
[Inferior 1 (process 2136897) exited normally]

This shows that the first base case is not used when the program is run using these parameters because the breakpoint was never hit.

8.
(gdb) b 43
Breakpoint 2 at 0x401244: file q2.c, line 43.
(gdb) run 3 19
Starting program: /home/ugrads/nonmajors/nathan925/C03/C03gdb-summer12023/q2/q2 3 19
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".

Breakpoint 2, sumOfProducts (x=18, y=19) at q2.c:43
43                 return (x + 1) * y;

x = 18
y = 19

9.
(gdb) b 49
Breakpoint 3 at 0x401280: file q2.c, line 49.
(gdb) run 3 19
Starting program: /home/ugrads/nonmajors/nathan925/C03/C03gdb-summer12023/q2/q2 3 19
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".

Breakpoint 3, sumOfProducts (x=17, y=19) at q2.c:49
49              return next;

x = 17
y = 19

10.
(gdb) c
Continuing.

Breakpoint 3, sumOfProducts (x=15, y=19) at q2.c:49
49              return next;

This continue shows the return statement of the function that called the previous case. This is the third to last call on the recursive stack including the base case.

11.
sumOfProducts was called 5 times.

1- (3, 19)
2- (11, 19)
3- (15, 19)
4- (17, 19)
5- (18, 19)

12.
Reading symbols from q3...
(gdb) b 28
Breakpoint 1 at 0x4011af: file q3.c, line 28.
(gdb) condition 1 pass==1024
(gdb) run 1100
Starting program: /home/ugrads/nonmajors/nathan925/C03/C03gdb-summer12023/q3/q3 1100
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".

Breakpoint 1, main (argc=2, argv=0x7fffffffd8d8) at q3.c:28
28            retval = q3(pass);
(gdb) next
29            pass++;
(gdb) print retval
$1 = -427

The fuction returns -427 with 1024 as its parameter.

13.
Reading symbols from q3...
(gdb) b 29
Breakpoint 1 at 0x4011bc: file q3.c, line 29.
(gdb) condition 1 retval==630
(gdb) run 10000
Starting program: /home/ugrads/nonmajors/nathan925/C03/C03gdb-summer12023/q3/q3 10000
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".

Breakpoint 1, main (argc=2, argv=0x7fffffffd8c8) at q3.c:29
29            pass++;
(gdb) print pass
$1 = 1885

The variable pass equals 1885 at the beginning of the first iteration where the function returns 630.

14.
Reading symbols from q3...
(gdb) b 28
Breakpoint 1 at 0x4011af: file q3.c, line 28.
(gdb) condition 1 retval==630
(gdb) run 2000
Starting program: /home/ugrads/nonmajors/nathan925/C03/C03gdb-summer12023/q3/q3 2000
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".

Breakpoint 1, main (argc=2, argv=0x7fffffffd8d8) at q3.c:28
28            retval = q3(pass);
(gdb) step
q3 (N=1886) at q3.c:44
44         dejavue = N * dejavue + dejavue % 67;  // perform strange computation
(gdb) print dejavue
$1 = 1114611660

The variable dejavue is equal to 1114611660 before the function returns 630. The value can be read in the next function call because its value is retained for the next calculation.